#!/usr/bin/python3
import os
import sys
import pathlib
import argparse
import subprocess


PIP_VERSION = '22.0.3'
WHEEL_VERSION = '0.37.1'
SETUPTOOLS_VERSION = '60.9.3'
ANSIBLE_VERSION = '4.7.0'
POETRY_VERSION = '1.1.13'


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--system-packages", help="安裝系統相依套件", action="count", default=0)
    parser.add_argument("-d", "--deploy-packages", help="安裝 python 佈署套件", action="count", default=0)
    parser.add_argument("-p", "--project-packages", help="安裝專案", action="count", default=0)
    args = parser.parse_args()

    if args.system_packages + args.deploy_packages + args.project_packages == 0:
        args.system_packages = 1
        args.deploy_packages = 1
        args.project_packages = "default"

    if args.system_packages:
        check_perm()
        subprocess.run("apt install build-essential python3-dev python3-venv -y", shell=True)
    if args.deploy_packages:
        if not pathlib.Path('.venv').exists():
            subprocess.run("python3 -m venv .venv --system-site-packages", shell=True)
        subprocess.run(f".venv/bin/pip install 'pip=={PIP_VERSION}' -U", shell=True)
        subprocess.run(f".venv/bin/pip install 'wheel=={WHEEL_VERSION}' 'setuptools=={SETUPTOOLS_VERSION}' 'ansible=={ANSIBLE_VERSION}' 'poetry=={POETRY_VERSION}' -U", shell=True)
    if args.project_packages:
        subprocess.run(".venv/bin/poetry run bash -c 'cd ansible && ./download_deps.sh'", shell=True)
        # 如果只下 ./deploy 後面沒加上任何參數，代表要走單機佈署模式，會將整個系統環境與相依的系統套件都一並安裝設定
        if args.project_packages == "default":
            check_perm()
            subprocess.run(".venv/bin/poetry run ansible-playbook ansible/production.yml --skip-tags upgrade_db_schema "
                               "--extra-vars='@ansible/production.conf'",
                           shell=True)
        else:
            subprocess.run(".venv/bin/poetry run ansible-playbook ansible/production.yml --skip-tags upgrade_db_schema "
                               "--extra-vars='@ansible/production.conf' --tags install_project",
                           shell=True)


def check_perm():
    if os.geteuid() != 0:
        print("請使用 root 權限執行此 script", file=sys.stderr)
        exit(1)


if __name__ == '__main__':
    main()
