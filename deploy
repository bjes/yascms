#!/usr/bin/python3
import os
import sys
import argparse
import subprocess


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--system-packages", help="安裝系統相依套件", action="count", default=0)
    parser.add_argument("-d", "--deploy-packages", help="安裝 python 佈署套件", action="count", default=0)
    parser.add_argument("-p", "--project-packages", help="安裝專案", action="count", default=0)
    args = parser.parse_args()

    if args.system_packages + args.deploy_packages + args.project_packages == 0:
        args.system_packages = 1
        args.deploy_packages = 1
        args.project_packages = "default"

    if args.system_packages:
        check_perm()
        subprocess.call("apt install build-essential python3-dev python3-venv -y", shell=True)
    if args.deploy_packages:
        subprocess.call("python3 -m venv .venv --system-site-packages", shell=True)
        subprocess.call(".venv/bin/pip install 'pip==21.1.2'", shell=True)
        subprocess.call(".venv/bin/pip install 'wheel==0.36.2' 'setuptools==57.0.0' 'ansible==4.1.0' 'poetry==1.1.6'", shell=True)
    if args.project_packages:
        check_perm()
        subprocess.call(".venv/bin/poetry run bash -c 'cd ansible && ./download_deps.sh'", shell=True)
        if args.project_packages == "default":
            subprocess.call(".venv/bin/poetry run ansible-playbook ansible/deploy.yml --extra-vars='@ansible/deploy.conf'", shell=True)
        else:
            subprocess.call(".venv/bin/poetry run ansible-playbook ansible/deploy.yml --extra-vars='@ansible/deploy.conf' --tags deploy_project", shell=True)


def check_perm():
    if os.geteuid() != 0:
        print("請使用 root 權限執行此 script", file=sys.stderr)
        exit(1)


if __name__ == '__main__':
    main()
